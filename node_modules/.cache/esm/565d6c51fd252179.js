let jwt,Token,env;_fd2‍.x([["default",()=>_fd2‍.o]]);_fd2‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_fd2‍.w("@lib/token",[["default",["Token"],function(v){Token=v}]]);_fd2‍.w("@root/config.json",[["default",["env"],function(v){env=v}]]);



const jwtMiddleware = async (ctx, next) => {
  const token = ctx.cookies.get('access_token');
  if (!token) return next(); // 토큰이 없음
  try {
    const decoded = jwt.verify(token, env.JWT_SECRET);
    ctx.state.user = {
      userid: decoded.userid,      
    };
    // 토큰 48시간 미만 남으면 재발급
    const now = Math.floor(Date.now() / 1000);
    if (decoded.exp - now < 60 * 60 * 48) {
      const token = Token(decoded.userid);
      ctx.cookies.set('access_token', token, {
        maxAge: 1000 * 60 * 60 * 8760,
        httpOnly: true,
      });
    }

    return next();
  } catch (e) {
    // 토큰 검증 실패
    return next();
  }
};

_fd2‍.d(jwtMiddleware);
